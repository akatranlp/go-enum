{{- $root := . -}}
{{- $structName := lower .Enum | firstChar -}}
{{- $emptyValue := combine .Enum "Empty" -}}
{{- $valueMaxLength := 0 -}}
{{- if .EmptyValid -}}
{{- $valueMaxLength = len $emptyValue -}}
{{- end -}}
{{- range .Values -}}
{{- $valueMaxLength = max $valueMaxLength (len .) -}}
{{- end -}}
// Code generated by "{{ .App }}". DO NOT EDIT.
package {{ lower .Enum }}

import (
	"errors"
)

type {{ .Enum }} string

const (
	{{- if .EmptyValid }}
	{{ printf "%-*s" $valueMaxLength $emptyValue }} {{ .Enum }} = ""
	{{- end }}
	{{- range .Values }}
	{{ capitalize . | printf "%-*s" $valueMaxLength }} {{ $root.Enum }} = "{{ . }}"
	{{- end}}
)

var (
	ErrInvalidValue = errors.New("invalid {{lower .Enum}} value")
)

func ({{ $structName }} {{ .Enum }}) Validate() error {
	switch {{ $structName }} {
	case {{- " " -}}
	{{- if .EmptyValid -}} Empty, {{ end -}}
	{{- range $i, $v := .Values -}}
		{{- if ne $i 0 -}}, {{ end -}} {{- capitalize $v -}} 
	{{- end -}}:
		return nil
	}
	return ErrInvalidValue
}

func Parse(s string) ({{ .Enum }}, error) {
	v := {{ .Enum }}(s)
	if err := v.Validate(); err != nil {
		return "", err
	}
	return v, nil
}

// Satisfy the flag package Value interface.
func ({{ $structName }} *{{ .Enum }}) Set(s string) error {
	{{ $structName -}}s, err := Parse(s)
	if err != nil {
		return err
	}
	*{{ $structName }} = {{ $structName -}}s
	return nil
}

func ({{ $structName }} {{ .Enum }}) String() string {
	return string({{ $structName }})
}

// Satisfy the flag package Getter interface.
func ({{ $structName }} *{{ .Enum }}) Get() interface{} { return {{ .Enum }}(*{{ $structName }}) }

// Satisfy the pflag package Value interface.
func ({{ $structName }} *{{ .Enum }}) Type() string { return "{{ lower .Enum }}" }

// Satisfy the encoding.TextUnmarshaler interface.
func ({{ $structName }} *{{ .Enum }}) UnmarshalText(text []byte) error {
	return {{ $structName }}.Set(string(text))
}
