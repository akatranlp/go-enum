// Code generated by "akatranlp/go-enum string EnumType string int". DO NOT EDIT.
package enumtype

import (
	"errors"
)

type EnumType string

const (
	String EnumType = "string"
	Int    EnumType = "int"
)

var (
	ErrInvalidValue = errors.New("invalid enumtype value")
)

func (e EnumType) Validate() error {
	switch e {
	case String, Int:
		return nil
	}
	return ErrInvalidValue
}

func Parse(s string) (EnumType, error) {
	v := EnumType(s)
	if err := v.Validate(); err != nil {
		return "", err
	}
	return v, nil
}

// Satisfy the flag package Value interface.
func (e *EnumType) Set(s string) error {
	es, err := Parse(s)
	if err != nil {
		return err
	}
	*e = es
	return nil
}

func (e EnumType) String() string {
	return string(e)
}

// Satisfy the flag package Getter interface.
func (e *EnumType) Get() interface{} { return EnumType(*e) }

// Satisfy the pflag package Value interface.
func (e *EnumType) Type() string { return "enumtype" }

// Satisfy the encoding.TextUnmarshaler interface.
func (e *EnumType) UnmarshalText(text []byte) error {
	return e.Set(string(text))
}
